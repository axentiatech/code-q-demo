<?php
namespace App\Tests\Unit\BoundedContexts\UserManager\Integration;
use 
App\BoundedContexts\UserManager\Application\Command\Roles\AddUserRole\AddU
serRoleCommand;
use 
App\BoundedContexts\UserManager\Application\Command\Roles\DeleteUserRole\D
eleteUserRoleCommand;
use 
App\BoundedContexts\UserManager\Application\Command\Roles\UpdateUserRole\U
pdateUserRoleCommand;
use 
App\BoundedContexts\UserManager\Application\Query\Roles\GetAllRoles\GetUse
rRolesQuery;
use 
App\BoundedContexts\UserManager\Application\Query\Roles\GetUserRole\GetUse
rRoleDetailsQuery;
use App\BoundedContexts\UserManager\Domain\Exception\UserRoleException;
use 
App\BoundedContexts\UserManager\Domain\Repository\UserRoleRepositoryInterf
ace;
use App\BoundedContexts\UserManager\Domain\ValueObject\UserRoleId;
use App\Infrastructure\Entity\UserRole;
use App\Tests\Unit\Common\GlobalIntegrationTestCase;
use Doctrine\ORM\EntityManagerInterface;
use JsonException;
abstract class UserManagerTestCase extends GlobalIntegrationTestCase
{
    protected function getUserRole(string $title): ?UserRole
    {
        /**
         * @var EntityManagerInterface $em
         */
        $em = self::$container->get(EntityManagerInterface::class);
        /** @var UserRole $userRole */
        $userRole = 
$em->getRepository(UserRole::class)->findOneBy(['title' => $title]);
        if (!$userRole) {
            throw new UserRoleException("User not found.", 404);
        }
        return $userRole;
    }
    public function getUserRoleUuid(string $uuid)
    {
        /**
         * @var EntityManagerInterface $em
         */
        $em = self::$container->get(EntityManagerInterface::class);
        /** @var UserRole $userRole */
        $userRole = $em->getRepository(UserRole::class)->findOneBy(['uuid' 
=> new UserRoleId($uuid)]);
        if (!$userRole) {
            throw new UserRoleException("User not found.", 404);
        }
        return $userRole;
    }
    protected function addUserRole($title)
    {
        $response = $this->dispatchCommand(AddUserRoleCommand::class, [
            $title
        ]);
        return sprintf('Role with title "%s" has been added !', $title);
    }
    protected function updateUserRole($uuid, $title)
    {
        $response = $this->dispatchCommand(UpdateUserRoleCommand::class, [
            $uuid,
            $title
        ]);
        return sprintf('Role with title "%s" has been updated !', $title);
    }
    /**
     * @return mixed
     * @throws JsonException
     */
    protected function getUserRoles()
    {
        $response = $this->dispatchQuery(GetUserRolesQuery::class,
            []
        );
        return $response;
    }
    protected function visualizeUserRole(string $title)
    {
        return $this->dispatchQuery(
            GetUserRoleDetailsQuery::class,
            [
                $title
            ]
        );
    }
    protected function deleteUserRole(?string $uuid)
    {
        $this->dispatchCommand(
            DeleteUserRoleCommand::class,
            [
                $uuid
            ]
        );
        return sprintf('role with "%s" is deleted!', $uuid);
    }
}

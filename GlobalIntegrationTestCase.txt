<?php
namespace App\Tests\Unit\Common;
use App\Application\Common\Command\CommandBusInterface;
use App\Application\Common\Query\QueryBusInterface;
use DAMA\DoctrineTestBundle\Doctrine\DBAL\StaticDriver;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Messenger\Envelope;
use Symfony\Component\Messenger\Stamp\HandledStamp;
abstract class GlobalIntegrationTestCase extends KernelTestCase
{
    private static array $fixtureListToCharge = [];
    public function setUp(): void
    {
        self::bootKernel();
        parent::setUp();
    }
    public static function setUpBeforeClass(): void
    {
        exec('php bin/console doctrine:database:create --env=test');
        exec('php bin/console doctrine:schema:update --force --env=test');
        parent::setUpBeforeClass();
        StaticDriver::setKeepStaticConnections(false);
        self::$fixtureListToCharge = [];
        static::setDefaultFixtures();
        StaticDriver::setKeepStaticConnections(true);
    }
    public static function tearDownAfterClass(): void
    {
        exec('php bin/console doctrine:database:drop --if-exists --force 
--env=test');
        exec('php bin/console doctrine:database:create --env=test');
        exec('php bin/console doctrine:schema:update --force --env=test');
    }
    /**
     * @return $this
     */
    protected static function userRolesFixtures(): 
GlobalIntegrationTestCase
    {
        $directory = 'tests/Unit/Common/Fixtures/UserRoles/';
        self::$fixtureListToCharge = array_merge(
            self::$fixtureListToCharge,
            array_map(static fn(string $file) => $directory . $file, 
array_diff(scandir($directory), array('..', '.')))
        );
        return new static();
    }
    public abstract static function setDefaultFixtures(): void;
    protected static function fixtureList(array $liste): 
GlobalIntegrationTestCase
    {
        self::$fixtureListToCharge = array_merge(
            self::$fixtureListToCharge,
            $liste
        );
        return new static();
    }
    protected static function insertFixtures(): void
    {
        self::bootKernel();
        // get Alice fixture loader
        $loader = 
self::$container->get('fidry_alice_data_fixtures.loader.doctrine');
        $loader->load(self::$fixtureListToCharge);
    }
    protected function dispatchCommand(string $commandName, array 
$payLoad)
    {
        $commandBusDispatcher = 
self::$container->get(CommandBusInterface::class);
        /** @var CommandBusInterface $commandBusDispatcher */
        return $commandBusDispatcher->handle(new 
$commandName(...$payLoad));
    }
    protected function dispatchQuery(string $queryName, array $payload = 
[])
    {
        $queryBusDispatcher = 
self::$container->get(QueryBusInterface::class);
        $query = new $queryName(...$payload);
        return $queryBusDispatcher->ask($query);
    }
}
